{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  login: async (email, password) => {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  },\n  register: async (username, email, password, fullName) => {\n    const response = await api.post('/auth/register', {\n      username,\n      email,\n      password,\n      fullName\n    });\n    return response.data;\n  },\n  verifyToken: async () => {\n    const response = await api.get('/auth/verify');\n    return response.data;\n  }\n};\n\n// Posts API\nexport const postsAPI = {\n  getAllPosts: async () => {\n    const response = await api.get('/posts');\n    return response.data;\n  },\n  getPostById: async id => {\n    const response = await api.get(`/posts/${id}`);\n    return response.data;\n  },\n  createPost: async postData => {\n    const response = await api.post('/posts', postData);\n    return response.data;\n  },\n  updatePost: async (id, postData) => {\n    const response = await api.put(`/posts/${id}`, postData);\n    return response.data;\n  },\n  deletePost: async id => {\n    const response = await api.delete(`/posts/${id}`);\n    return response.data;\n  },\n  trackClick: async postId => {\n    const response = await api.post(`/posts/${postId}/click`);\n    return response.data;\n  }\n};\n\n// Search API\nexport const searchAPI = {\n  search: async searchQuery => {\n    const response = await api.post('/search', searchQuery);\n    return response.data;\n  }\n};\n\n// User API\nexport const userAPI = {\n  getProfile: async () => {\n    const response = await api.get('/user/profile');\n    return response.data;\n  },\n  getUserPosts: async () => {\n    const response = await api.get('/user/posts');\n    return response.data;\n  },\n  getUserEarnings: async () => {\n    const response = await api.get('/user/earnings');\n    return response.data;\n  }\n};\n\n// Contact API\nexport const contactAPI = {\n  submitContact: async contactData => {\n    const response = await api.post('/contact/submit', contactData);\n    return response.data;\n  },\n  getContacts: async params => {\n    const response = await api.get('/contact/admin/list', {\n      params\n    });\n    return response.data;\n  },\n  getContact: async id => {\n    const response = await api.get(`/contact/admin/${id}`);\n    return response.data;\n  },\n  updateContact: async (id, data) => {\n    const response = await api.put(`/contact/admin/${id}`, data);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","authAPI","login","email","password","response","post","data","register","username","fullName","verifyToken","get","postsAPI","getAllPosts","getPostById","id","createPost","postData","updatePost","put","deletePost","delete","trackClick","postId","searchAPI","search","searchQuery","userAPI","getProfile","getUserPosts","getUserEarnings","contactAPI","submitContact","contactData","getContacts","params","getContact","updateContact"],"sources":["C:/code/Resourcer/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { User, Post, SearchQuery } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  login: async (email: string, password: string) => {\n    const response = await api.post('/auth/login', { email, password });\n    return response.data;\n  },\n\n  register: async (username: string, email: string, password: string, fullName?: string) => {\n    const response = await api.post('/auth/register', { username, email, password, fullName });\n    return response.data;\n  },\n\n  verifyToken: async () => {\n    const response = await api.get('/auth/verify');\n    return response.data;\n  },\n};\n\n// Posts API\nexport const postsAPI = {\n  getAllPosts: async () => {\n    const response = await api.get('/posts');\n    return response.data;\n  },\n\n  getPostById: async (id: number) => {\n    const response = await api.get(`/posts/${id}`);\n    return response.data;\n  },\n\n  createPost: async (postData: Partial<Post>) => {\n    const response = await api.post('/posts', postData);\n    return response.data;\n  },\n\n  updatePost: async (id: number, postData: Partial<Post>) => {\n    const response = await api.put(`/posts/${id}`, postData);\n    return response.data;\n  },\n\n  deletePost: async (id: number) => {\n    const response = await api.delete(`/posts/${id}`);\n    return response.data;\n  },\n\n  trackClick: async (postId: number) => {\n    const response = await api.post(`/posts/${postId}/click`);\n    return response.data;\n  },\n};\n\n// Search API\nexport const searchAPI = {\n  search: async (searchQuery: SearchQuery) => {\n    const response = await api.post('/search', searchQuery);\n    return response.data;\n  },\n};\n\n// User API\nexport const userAPI = {\n  getProfile: async () => {\n    const response = await api.get('/user/profile');\n    return response.data;\n  },\n\n  getUserPosts: async () => {\n    const response = await api.get('/user/posts');\n    return response.data;\n  },\n\n  getUserEarnings: async () => {\n    const response = await api.get('/user/earnings');\n    return response.data;\n  },\n};\n\n// Contact API\nexport const contactAPI = {\n  submitContact: async (contactData: {\n    name: string;\n    email: string;\n    subject: string;\n    message: string;\n  }) => {\n    const response = await api.post('/contact/submit', contactData);\n    return response.data;\n  },\n\n  getContacts: async (params?: {\n    status?: string;\n    page?: number;\n    limit?: number;\n  }) => {\n    const response = await api.get('/contact/admin/list', { params });\n    return response.data;\n  },\n\n  getContact: async (id: number) => {\n    const response = await api.get(`/contact/admin/${id}`);\n    return response.data;\n  },\n\n  updateContact: async (id: number, data: {\n    status: string;\n    admin_notes?: string;\n  }) => {\n    const response = await api.put(`/contact/admin/${id}`, data);\n    return response.data;\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}